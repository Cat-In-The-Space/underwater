name: Actions 😎

on:
  pull_request: {}
  push: { branches: [main] }

jobs:
  buildAndTestForLinuxBasedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
#        projectPath:
#          - test-project
        unityVersion:
          - 2021.3.9f1
        targetPlatform:
#          - StandaloneLinux64 # Build a Linux 64-bit standalone.
#          - iOS # Build an iOS player.
          - Android # Build an Android player.
#          - WebGL # WebGL.
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key:
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{
            hashFiles(matrix.projectPath) }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-
            Library-${{ matrix.projectPath }}-
            Library-
#      - uses: game-ci/unity-test-runner@v2
#        id: testRunner
#        env:
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#        with:
#          projectPath: ${{ matrix.projectPath }}
#          unityVersion: ${{ matrix.unityVersion }}
#          githubToken: ${{ secrets.GITHUB_TOKEN }}
#      - uses: actions/upload-artifact@v2
#        if: always()
#        with:
#          name: Test results (all modes)
#          path: ${{ steps.testRunner.outputs.artifactsPath }}
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          allowDirtyBuild: true
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build
      - name: Public APK
        run: |
          curl -v -F "text=`curl --upload-file ${{ github.workspace }}/build/Android/Android.apk https://transfer.sh/Android.apk`" -F "chat_id=${{ secrets.PUBLIC_APK_CHAT_ID }}" https://api.telegram.org/bot${{ secrets.PUBLIC_APK_BOT_TOKEN }}/sendMessage
